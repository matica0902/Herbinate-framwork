1.Working with both Object-Oriented software and Relational Databases can be cumbersome and time consuming. 
Development costs are significantly higher due to a paradigm mismatch between how data is represented in 
objects versus relational databases.

2.Hibernate is an Object/Relational Mapping (ORM) solution 
for Java environments. 

3.Hibernate takes care of the [mapping from Java classes to database tables], and [from Java data types to SQL data types].
In addition, it provides data query and retrieval facilities. 

4.It can significantly reduce development time otherwise spent with manual data handling in SQL and JDBC. 
Hibernate’s design goal is to relieve the developer from 95% of common data persistence-related programming tasks 
by [eliminating] the need for manual, hand-crafted data processing using SQL and JDBC.
簡言之Herbinate 連 SQL 與 JDBC 的前置作業JSP 需告介面與實作M的部分全部省了!!!
所以稱之為ORM 就是能直接用物件mapping 到資料庫的資料技術!!

5.However, unlike many other persistence solutions, Hibernate does not hide the power of SQL from you and 
guarantees that your investment in relational technology and knowledge is as valid as always.

Example 1. The class mapping element
<class name="Event" table="EVENTS">
	...
</class>

Example 2. The id mapping element
<id name="id" column="EVENT_ID">
    ...
</id>

Example 3. The property mapping element
<property name="date" type="timestamp" column="EVENT_DATE"/>
<property name="title"/>

Example 4. Obtaining the org.hibernate.SessionFactory
protected void setUp() throws Exception {
	// A SessionFactory is set up once for an application!
	final StandardServiceRegistry registry = new StandardServiceRegistryBuilder()
			.configure() // configures settings from hibernate.cfg.xml
			.build();
	try {
		sessionFactory = new MetadataSources( registry ).buildMetadata().buildSessionFactory();
	}
	catch (Exception e) {
		// The registry would be destroyed by the SessionFactory, but we had trouble building the SessionFactory
		// so destroy it manually.
		StandardServiceRegistryBuilder.destroy( registry );
	}
}


Example 5. Saving entities
Session session = sessionFactory.openSession();
session.beginTransaction();
session.save( new Event( "Our very first event!", new Date() ) );
session.save( new Event( "A follow up event", new Date() ) );
session.getTransaction().commit();
session.close();


Example 6. Obtaining a list of entities
session = sessionFactory.openSession();
session.beginTransaction();
List result = session.createQuery( "from Event" ).list();
for ( Event event : (List<Event>) result ) {
    System.out.println( "Event (" + event.getDate() + ") : " + event.getTitle() );
}
session.getTransaction().commit();
session.close();

Example 7. Identifying the class as an entity
@Entity
@Table( name = "EVENTS" )
public class Event {
    ...
}

Example 8. Identifying the identifier property
@Id
@GeneratedValue(generator="increment")
@GenericGenerator(name="increment", strategy = "increment")
public Long getId() {
    return id;
}

Example 9. Identifying basic properties
public String getTitle() {
    return title;
}

@Temporal(TemporalType.TIMESTAMP)
@Column(name = "EVENT_DATE")
public Date getDate() {
    return date;
}

Example 10. persistence.xml
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
        version="2.0">
    <persistence-unit name="org.hibernate.tutorial.jpa">
        ...
    </persistence-unit>
</persistence>

Example 11. Obtaining the javax.persistence.EntityManagerFactory
protected void setUp() throws Exception {
	sessionFactory = Persistence.createEntityManagerFactory( "org.hibernate.tutorial.jpa" );
}

Example 12. Saving (persisting) entities
EntityManager entityManager = sessionFactory.createEntityManager();
entityManager.getTransaction().begin();
entityManager.persist( new Event( "Our very first event!", new Date() ) );
entityManager.persist( new Event( "A follow up event", new Date() ) );
entityManager.getTransaction().commit();
entityManager.close();


Example 13. Obtaining a list of entities
entityManager = sessionFactory.createEntityManager();
entityManager.getTransaction().begin();
List<Event> result = entityManager.createQuery( "from Event", Event.class ).getResultList();
for ( Event event : result ) {
	System.out.println( "Event (" + event.getDate() + ") : " + event.getTitle() );
}
entityManager.getTransaction().commit();
entityManager.close();

xample 14. Using the org.hibernate.envers.AuditReader
public void testBasicUsage() {
    ...
    AuditReader reader = AuditReaderFactory.get( entityManager );
    Event firstRevision = reader.find( Event.class, 2L, 1 );
    ...
    Event secondRevision = reader.find( Event.class, 2L, 2 );
    ...
}
